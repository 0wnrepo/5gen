#!/usr/bin/python

"""
To use this tool, run:
./ore_encrypt -i 1 4 17 42
This will encrypt the number 42, using base 4 and length 17. Make sure that the flags are set before
the encrypted message.
"""

from subprocess import call
import math, sys, os

num = int(sys.argv[-1])

base = int(sys.argv[-3])
bitstr_len = int(sys.argv[-2])

def digit_to_char(digit):
    if digit < 10:
        return str(digit)
    return chr(ord('a') + digit - 10)

def str_base(number,base):
    if number < 0:
        return '-' + str_base(-number, base)
    (d, m) = divmod(number, base)
    if d > 0:
        return str_base(d, base) + digit_to_char(m)
    return digit_to_char(m)

def dary_repr(number, d, n):
    repr = list(str(str_base(number, d)))
    repr = (['0'] * (n - len(repr))) + repr
    return "".join(repr)

# turns a "10" in any base to a 001 000
def digit_dary_repr(num_str, d):
	L = []
	for x in num_str:
		L.append(format(int(x), 'b').zfill(int(math.ceil(math.log(d, 2)))))
	return "".join(L)

def pinch(L, start):
    i = start
    while i+2 <= len(L):
        L[i:i+2] = [''.join(L[i:i+2])]
        i += 1
    return L

def interleave(A, B):
    C = A + B
    C[::2] = A
    C[1::2] = B
    return C

repr = dary_repr(num, base, bitstr_len)

left = pinch(list(repr), 1)
right = pinch(list(repr), 0)
arr = interleave(left, right)

arr = map(lambda elem: digit_dary_repr(elem, base), arr)

arr = str(arr).replace('\'','"')

cmd = sys.argv[:]
cmd[0] = './build/bin/encrypt'
cmd[-1] = '\'' + str(arr) + '\''
del cmd[-3]
del cmd[-2]

print(" ".join(cmd))
os.system(" ".join(cmd))
